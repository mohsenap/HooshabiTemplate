namespace Hooshabi.Server.Application.Catalog.$$Entity$$s;

public class Update$$Entity$$Request : IRequest<$$KeyType$$>
{
    public $$KeyType$$ Id { get; set; }
    public dynamic Model { get; set; }
}

public class Update$$Entity$$RequestValidator : CustomValidator<Update$$Entity$$Request>
{
    public Update$$Entity$$RequestValidator(IRepository<$$Entity$$> repository, IStringLocalizer<Update$$Entity$$RequestValidator> localizer) {

    }
       // RuleFor(p => p.Name)
       //     .NotEmpty()
       //     .MaximumLength(75)
       //     .MustAsync(async ($$Entity$$, name, ct) =>
       //             await repository.GetBySpecAsync(new $$Entity$$ByNameSpec(name), ct)
       //                 is not $$Entity$$ existing$$Entity$$ || existing$$Entity$$.Id == $$Entity$$.Id)
       //         .WithMessage((_, name) => string.Format(localizer["$$Entity$$.alreadyexists"], name));
}

public class Update$$Entity$$RequestHandler : IRequestHandler<Update$$Entity$$Request, $$KeyType$$>
{
    // Add Domain Events automatically by using IRepositoryWithEvents
    private readonly IRepositoryWithEvents<$$Entity$$> _repository;
    private readonly IStringLocalizer<Update$$Entity$$RequestHandler> _localizer;

    public Update$$Entity$$RequestHandler(IRepositoryWithEvents<$$Entity$$> repository, IStringLocalizer<Update$$Entity$$RequestHandler> localizer) =>
        (_repository, _localizer) = (repository, localizer);

    public async Task<$$KeyType$$> Handle(Update$$Entity$$Request request, CancellationToken cancellationToken)
    {
       var entity = await _repository.GetByIdAsync(request.Id, cancellationToken);
        _ = entity ?? throw new NotFoundException(string.Format(_localizer["Entity1.notfound"], request.Id));
        await _repository.UpdateDynamicAsync(entity, request.Model, cancellationToken);
        return entity.Id;
    }
}